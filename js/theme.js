// 主题 & Accent 动态切换 + 自动模式 & 设备状态检测
(()=>{const R=document.documentElement,cfg=window.__APP_CONFIG__||{},THEME_KEY='onedays-theme',ACC_KEY='onedays-accent';const btn=document.getElementById('themeToggle');const accents=cfg.accents||[];let accentIdx=parseInt(localStorage.getItem(ACC_KEY)||cfg.defaultAccentIndex||0,10)||0;function setAccent(i){if(!accents.length)return;accentIdx=(i+accents.length)%accents.length;R.style.setProperty('--accent',accents[accentIdx]);R.style.setProperty('--accent-hover',accents[accentIdx].replace(/(\d+%?\))?$/,''));localStorage.setItem(ACC_KEY,accentIdx);}setAccent(accentIdx);const mqlDark=matchMedia('(prefers-color-scheme: dark)');const sysDark=()=>mqlDark.matches;let savedMode=localStorage.getItem(THEME_KEY); if(!savedMode){ savedMode='auto'; try{localStorage.setItem(THEME_KEY,'auto');}catch(_){}} 
function applyEffective(){const dark=sysDark(); if(savedMode==='auto'){ R.setAttribute('data-theme', dark? 'dark':'light'); } else { R.setAttribute('data-theme', savedMode); }}
applyEffective();
function currentEffective(){return R.getAttribute('data-theme');}
function updateBtn(){ if(!btn)return; const eff=currentEffective(); let icon='🌓'; if(savedMode==='auto') icon= eff==='dark'?'💤':'💻'; else icon= eff==='dark'?'🌤':'🌓'; btn.textContent=icon; btn.title='主题: '+(savedMode==='auto'? '自动('+eff+')':eff); btn.setAttribute('aria-label',btn.title); btn.dataset.mode=savedMode; btn.setAttribute('data-accent',accentIdx);}updateBtn();
let lastTap=0; btn&&btn.addEventListener('click',e=>{const now=Date.now(); if(now-lastTap<400){ setAccent(accentIdx+1); updateBtn(); lastTap=0; return;} lastTap=now; const order=['auto','light','dark']; const idx=order.indexOf(savedMode); savedMode=order[(idx+1)%order.length]; localStorage.setItem(THEME_KEY,savedMode); applyEffective(); updateBtn(); });
const darkListener=()=>{ if(savedMode==='auto'){ applyEffective(); updateBtn(); }}; if(mqlDark.addEventListener) mqlDark.addEventListener('change',darkListener); else mqlDark.addListener(darkListener);
if(!window.getDeviceDisplayState){ window.getDeviceDisplayState=function(){ const motion=matchMedia('(prefers-reduced-motion: reduce)').matches; let dataSaver=false; try{ dataSaver=matchMedia('(prefers-reduced-data: reduce)').matches; }catch(_){ } let contrast; try{ const mqMore=matchMedia('(prefers-contrast: more)'); const mqLess=matchMedia('(prefers-contrast: less)'); contrast=mqMore.matches?'more':mqLess.matches?'less':'no-preference'; }catch(_){ contrast=undefined; } return { mode:savedMode, effective: currentEffective(), systemDark: sysDark(), reducedMotion: motion, reducedData: dataSaver, contrast }; }; }
})();
